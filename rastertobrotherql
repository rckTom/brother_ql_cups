#!/usr/bin/env python

import sys
from collections import namedtuple
from struct import unpack
from brother_ql.conversion import convert
from brother_ql.raster import BrotherQLRaster
import numpy as np
from PIL import Image


# Ras3 parsing from https://github.com/pretix/cups-fgl-printers

CupsRas3 = namedtuple(
    # Documentation at https://www.cups.org/doc/spec-raster.html
    'CupsRas3',
    'MediaClass MediaColor MediaType OutputType AdvanceDistance AdvanceMedia Collate CutMedia Duplex HWResolutionH '
    'HWResolutionV ImagingBoundingBoxL ImagingBoundingBoxB ImagingBoundingBoxR ImagingBoundingBoxT '
    'InsertSheet Jog LeadingEdge MarginsL MarginsB ManualFeed MediaPosition MediaWeight MirrorPrint '
    'NegativePrint NumCopies Orientation OutputFaceUp PageSizeW PageSizeH Separations TraySwitch Tumble cupsWidth '
    'cupsHeight cupsMediaType cupsBitsPerColor cupsBitsPerPixel cupsBitsPerLine cupsColorOrder cupsColorSpace '
    'cupsCompression cupsRowCount cupsRowFeed cupsRowStep cupsNumColors cupsBorderlessScalingFactor cupsPageSizeW '
    'cupsPageSizeH cupsImagingBBoxL cupsImagingBBoxB cupsImagingBBoxR cupsImagingBBoxT cupsInteger1 cupsInteger2 '
    'cupsInteger3 cupsInteger4 cupsInteger5 cupsInteger6 cupsInteger7 cupsInteger8 cupsInteger9 cupsInteger10 '
    'cupsInteger11 cupsInteger12 cupsInteger13 cupsInteger14 cupsInteger15 cupsInteger16 cupsReal1 cupsReal2 '
    'cupsReal3 cupsReal4 cupsReal5 cupsReal6 cupsReal7 cupsReal8 cupsReal9 cupsReal10 cupsReal11 cupsReal12 '
    'cupsReal13 cupsReal14 cupsReal15 cupsReal16 cupsString1 cupsString2 cupsString3 cupsString4 cupsString5 '
    'cupsString6 cupsString7 cupsString8 cupsString9 cupsString10 cupsString11 cupsString12 cupsString13 cupsString14 '
    'cupsString15 cupsString16 cupsMarkerType cupsRenderingIntent cupsPageSizeName'
)

def read_ras3(rdata):
    if not rdata:
        raise ValueError('No data received')

    # Check for magic word (either big-endian or little-endian)
    magic = unpack('@4s', rdata[0:4])[0]
    if magic != b'RaS3' and magic != b'3SaR':
        raise ValueError("This is not in RaS3 format")
    rdata = rdata[4:]  # Strip magic word
    pages = []

    while rdata:  # Loop over all pages
        struct_data = unpack(
            '@64s 64s 64s 64s I I I I I II IIII I I I II I I I I '
            'I I I I II I I I I I I I I I I I I I I I I f ff ffff '
            'IIIIIIIIIIIIIIII ffffffffffffffff 64s 64s 64s 64s 64s'
            '64s 64s 64s 64s 64s 64s 64s 64s 64s 64s 64s 64s 64s '
            '64s',
            rdata[0:1796]
        )
        data = [
            # Strip trailing null-bytes of strings
            b.decode().rstrip('\x00') if isinstance(b, bytes) else b
            for b in struct_data
        ]
        header = CupsRas3._make(data)

        # Read image data of this page into a bytearray
        imgdata = rdata[
            1796:1796 + (
                header.cupsWidth * header.cupsHeight *
                header.cupsBitsPerPixel // 8
            )
        ]
        pages.append((header, imgdata))

        # Remove this page from the data stream,
        # continue with the next page
        rdata = rdata[
            1796 + (header.cupsWidth * header.cupsHeight *
                    header.cupsBitsPerPixel // 8):
        ]

    return pages

def main():
    pages = read_ras3(sys.stdin.buffer.read())

    print(pages, file = sys.stderr)
    images = list()

    for i, data in enumerate(pages):
        (header, img_data) = data
        print(header, file = sys.stderr)

        if header.cupsBitsPerPixel != 8:
                raise ValueError("only 8 bit per pixel supported")

        im = Image.frombuffer("L", (header.cupsWidth, header.cupsHeight), img_data)
        im = im.transpose(Image.FLIP_TOP_BOTTOM)

        im.save("/tmp/cups_filter_img.png")
        images.append(im)


    qlr = BrotherQLRaster(model="QL-820NWB")
    qlr.exception_on_warning = True

    cmd = convert(qlr, images, "29", lq = True)
    sys.stdout.buffer.write(cmd)
    return 0


if __name__ == "__main__":
	main()
